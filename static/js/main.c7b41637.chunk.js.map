{"version":3,"sources":["components/ResultDisplay/index.js","components/Numbers/SingleNumber.js","components/Numbers/index.js","components/Operators/SingleOperator.js","components/Operators/index.js","components/Operators/EqualOperator.js","components/Reset/index.js","components/Numbers/Decimal.js","components/Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["ResultDisplay","_ref","value","display","react_default","a","createElement","className","SingleNumber","children","onClick","type","Numbers","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","num","onUpdate","_this2","numbers","i","map","Numbers_SingleNumber","key","Component","SingleOperator","Operators","op","Operators_SingleOperator","EqualOperator","Reset","Decimal","Calculator","state","currVal","preVal","currDisplay","base","isNewNumber","isOperatorEntered","isCompleted","isDecimalAdded","displayedEquation","onEnterNumber","onAddDecimalPoint","onEnterOperator","onReset","updateResult","onEqualTo","_this$state","newBase","setState","newVal","Math","pow","console","log","toString","toPrecision","_this$state2","_this$state3","actualDisplay","parsed","parseInt","charAt","length","isNaN","slice","vals","ops","parts","split","_step","_iterator","_createForOfIteratorHelper","s","n","done","includes","push","val","parseFloat","pop","err","e","f","reverse","currResult","resultDisplay","toExponential","equationDisplay","operators","src_components_ResultDisplay","src_components_Reset","Operators_EqualOperator","src_components_Numbers","Numbers_Decimal","src_components_Operators","App","src_components_Calculator","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c7b41637.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst ResultDisplay = ({value, display}) =>\n\t<div className=\"result-display\">\n\t\t<div className=\"all-enter\">{display}</div>\n\t\t<div className=\"result\">{value}</div>\n\t</div>\n\nexport default ResultDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SingleNumber = ({className, children, onClick}) =>\n\t<button\n\t\tclassName={className}\n\t\tonClick={onClick}\n\t\ttype=\"button\"\n\t>\n\t\t{children}\n\t</button>\n\nSingleNumber.propTypes = {\n\tclassName: PropTypes.string,\n\tonClick: PropTypes.func.isRequired,\n\tchildren: PropTypes.number.isRequired\n}\n\nexport default SingleNumber;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleNumber from './SingleNumber';\nimport \"./index.css\";\n\nclass Numbers extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.onChange = this.onChange.bind(this);\n\t}\n\n\tonChange(num){\n\t\tthis.props.onUpdate(num);\n\t}\n\n\trender(){\n\t\tconst numbers = [];\n\t\tfor(let i = 1; i < 10; i++){\n\t\t\tnumbers[i] = i;\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t {numbers.map(num =>\n\t\t\t \t<SingleNumber key={num}\n\t\t\t \t\tclassName=\"num\"\n\t\t\t \t\tonClick={() => this.onChange(num)}>\n\t\t\t \t\t{num}\n\t\t\t \t</SingleNumber>\n\t\t\t )}\n\t\t\t \t<SingleNumber key={0}\n\t\t\t \t\tclassName=\"zero\"\n\t\t\t \t\tonClick={() => this.onChange(0)}>\n\t\t\t \t\t{0}\n\t\t\t \t</SingleNumber>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nNumbers.propTypes = {\n\tonUpdate: PropTypes.func.isRequired\n}\n\nexport default Numbers;\n","import React from 'react';\nimport \"./index.css\";\n\nconst SingleOperator = ({onClick, children}) => \n\t<button \n\t\tclassName=\"operators\"\n\t\ttype=\"button\"\n\t\tonClick={onClick}\n\t>\n\t\t{children}\n\t</button>\n\nexport default SingleOperator;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleOperator from './SingleOperator';\nimport \"./index.css\";\n\nclass Operators extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.onChange = this.onChange.bind(this);\n\t}\n\n\tonChange(op){\n\t\tthis.props.onUpdate(op);\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"op-box\">\n\t\t\t \t<SingleOperator onClick={() => this.onChange(\"+\")}>+</SingleOperator>\n\t\t\t \t<SingleOperator onClick={() => this.onChange(\"-\")}>-</SingleOperator>\n\t\t\t \t<SingleOperator onClick={() => this.onChange(\"*\")}>*</SingleOperator>\n\t\t\t \t<SingleOperator onClick={() => this.onChange(\"/\")}>/</SingleOperator>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nOperators.propTypes = {\n\tonUpdate: PropTypes.func.isRequired\n}\n\n\nexport default Operators;","import React from 'react';\nimport './index.css';\n\nconst EqualOperator = ({onClick}) => \n\t<button \n\t\tclassName=\"equal\"\n\t\ttype=\"button\"\n\t\tonClick={onClick}\n\t>\n\t\t=\n\t</button>\n\nexport default EqualOperator;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\n\nconst Reset = ({onClick}) =>\n\t<button \n\t\tclassName=\"reset\" \n\t\tonClick={onClick}\n\t\ttype=\"button\"> AC </button>\n\nReset.propTypes = {\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Reset;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./index.css\";\n\nconst Decimal = ({onClick}) => \n\t<button \n\t\tclassName=\"decimal\"\n\t\tonClick={onClick}\n\t\ttype=\"button\"\n\t>\n\t\t.\n\t</button>\n\n\nDecimal.propTypes = {\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Decimal;","import React, { Component } from 'react';\nimport ResultDisplay from '../ResultDisplay';\nimport Numbers from '../Numbers';\nimport Operators from '../Operators';\nimport EqualOperator from '../Operators/EqualOperator';\nimport Reset from '../Reset';\nimport Decimal from '../Numbers/Decimal';\nimport './index.css';\n\nclass Calculator extends Component{\n\tconstructor(props){\n\t    super(props);\n\n\t    this.state = {\n\t      currVal: 0,\n\t\t\t\tpreVal: 0,\n\t\t\t\tcurrDisplay: \"0\",\n\t\t\t\tbase: 1,\n\t      isNewNumber: true,\n\t      isOperatorEntered: false,\n\t      isCompleted: false,\n        isDecimalAdded: false,\n\t\t\t\tdisplayedEquation: \"\",\n\t    }\n\n\t    this.onEnterNumber = this.onEnterNumber.bind(this);\n\t    this.onAddDecimalPoint = this.onAddDecimalPoint.bind(this);\n\t    this.onEnterOperator = this.onEnterOperator.bind(this);\n\t    this.onReset = this.onReset.bind(this);\n\t    this.updateResult = this.updateResult.bind(this);\n\t    this.onEqualTo = this.onEqualTo.bind(this);\n  \t}\n\n  \tonEnterNumber(num){\n\t\t\tconst {currVal, base, isDecimalAdded, isCompleted, isNewNumber, displayedEquation} = this.state;\n\t\t\tif(currVal > 9999999999 || base >= 10) return;\n\t\t\t// if this is the beginning of an equation\n\t\t\t// or a new number after an operator\n\t\t\tlet newBase = base;\n\t\t\tif(isCompleted || isNewNumber){\n\t\t\t\tthis.setState((state) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisCompleted: false,\n\t\t\t\t\t\tcurrVal: num,\n\t\t\t\t\t\tcurrDisplay: num,\n\t\t\t\t\t\tisNewNumber: false,\n\t\t\t\t\t\tdisplayedEquation: isCompleted? \"\" + num : displayedEquation + num\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\tlet newVal = 0;\n\t\t\t\t// Determine whether the value has a decimal point\n\t\t\t\tif(isDecimalAdded){\n\t\t\t\t\tnewVal = currVal + num / Math.pow(10, newBase);\n\t\t\t\t\tnewBase++;\n\t\t\t\t}else{\n\t\t\t\t\tnewVal = currVal * 10 + num;\n\t\t\t\t}\n\t\t\t\tconsole.log(newVal);\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrVal: newVal,\n\t\t\t\t\tbase: newBase,\n\t\t\t\t\tcurrDisplay: base === 1 ? newVal.toString() : newVal.toPrecision(newBase - 1).toString(),\n\t\t\t\t\tisNewNumber: false,\n\t\t\t\t\tdisplayedEquation: displayedEquation + num\n\t\t\t\t})\n\t\t\t}\n  \t}\n\n  \tonAddDecimalPoint(){\n\t\t\tconst {currDisplay, isNewNumber,displayedEquation} = this.state;\n\t\t\tif(!this.state.isDecimalAdded){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisDecimalAdded: true,\n\t\t\t\t\tcurrDisplay: isNewNumber ? \".\" : currDisplay + \".\",\n\t\t\t\t\tdisplayedEquation: displayedEquation + \".\"\n\t\t\t\t});\n\t\t\t}\n  \t}\n\n  \tonEnterOperator(op) {\n\t\t\tconst {currVal, isCompleted, displayedEquation} = this.state;\n\t\t\tlet actualDisplay = displayedEquation;\n\t\t\tlet parsed = parseInt(displayedEquation.charAt(displayedEquation.length - 1));\n\t\t\tif(isNaN(parsed)){\n\t\t\t\tactualDisplay = displayedEquation.slice(0, displayedEquation.length - 1);\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tcurrVal: 0,\n\t\t\t\tbase: 1,\n\t\t\t\tisCompleted: false,\n\t\t\t\tisNewNumber: true,\n\t\t\t\tisDecimalAdded: false,\n\t\t\t\tisOperatorEntered: true,\n\t\t\t\tdisplayedEquation: isCompleted ? currVal + op : actualDisplay + op\n\t\t\t});\n  \t}\n\n  \tupdateResult(){\n  \t\tconst {displayedEquation} = this.state;\n\t\t\tlet vals = [];\n\t\t\tlet ops = [];\n\t\t\tlet parts = displayedEquation.split(/(\\+|-|\\*|\\/)/);\n\t\t\tif(parts[0] === \"\"){\n\t\t\t\tparts[0] = \"0\";\n\t\t\t}\n\t\t\tconsole.log(parts);\n\t\t\tfor(let s of parts){\n\t\t\t\tif([\"+\", \"-\", \"*\", \"/\"].includes(s)){\n\t\t\t\t\tops.push(s);\n\t\t\t\t}else{\n\t\t\t\t\tlet op = ops[ops.length - 1];\n\t\t\t\t\tif([\"*\", \"/\"].includes(op)){\n\t\t\t\t\t\tlet val = parseFloat(s);\n\t\t\t\t\t\tops.pop();\n\t\t\t\t\t\tlet preVal = vals.pop();\n\t\t\t\t\t\tif(op === \"*\"){\n\t\t\t\t\t\t\tvals.push(preVal * val);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tvals.push(preVal / val);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvals.push(parseFloat(s));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(\"vals:\" + vals);\n\t\t\tconsole.log(\"ops: \" + ops);\n\t\t\tvals = vals.reverse();\n\t\t\tops = ops.reverse();\n\t\t\twhile(ops.length !== 0){\n\t\t\t\tlet op = ops.pop();\n\t\t\t\tlet preVal = vals.pop();\n\t\t\t\tlet val = vals.pop();\n\t\t\t\tif(op === \"+\"){\n\t\t\t\t\tvals.push(preVal + val);\n\t\t\t\t}else vals.push(preVal - val);\n\t\t\t}\n\t\t\treturn vals.pop();\n  \t}\n\n  \tonEqualTo(){\n\t\t\tconst currResult = this.updateResult();\n\t\t\tif(isNaN(currResult)){\n\t\t\t\tthis.onReset();\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrDisplay: \"Error\"\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst resultDisplay = currResult.toString().length <= 12 ? currResult : currResult.toExponential(8);\n\t\t\tconst {displayedEquation} = this.state;\n\t\t\tlet equationDisplay = displayedEquation + \"=\" + resultDisplay;\n\t\t\tthis.setState({\n\t\t\t\tcurrVal: currResult,\n\t\t\t\tbase: 1,\n\t\t\t\tcurrDisplay: resultDisplay,\n\t\t\t\tisCompleted: true,\n\t\t\t\tisNewNumber: true,\n\t\t\t\tisDecimalAdded: false,\n\t\t\t\tisOperatorEntered: false,\n\t\t\t\toperators: [],\n\t\t\t\tdisplayedEquation: equationDisplay\n\t\t\t});\n  \t}\n\n  \tonReset(){\n  \t\tthis.setState({\n  \t\t\tisNewNumber: true,\n  \t\t\tisOperatorEntered: false,\n        isDecimalAdded: false,\n  \t\t\tcurrVal: 0,\n\t\t\t\tbase: 1,\n\t\t\t\tcurrDisplay: \"0\",\n  \t\t\toperators: [],\n        isCompleted: false,\n\t\t\t\tdisplayedEquation: \"\"\n  \t\t});\n  \t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"calculator\">\n\t\t\t\t<ResultDisplay value={this.state.currDisplay} display={this.state.displayedEquation}/>\n\t\t\t\t<div className=\"box\">\n\t\t\t\t\t<Reset onClick={this.onReset}/>\n\t\t\t\t\t<EqualOperator onClick={this.onEqualTo}/>\n\t\t\t\t</div>\n\t\t\t\t<Numbers onUpdate={this.onEnterNumber}/>\n        <Decimal onClick={this.onAddDecimalPoint}/>\n\t\t\t\t<Operators onUpdate={this.onEnterOperator}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Calculator;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}