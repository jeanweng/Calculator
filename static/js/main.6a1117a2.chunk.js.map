{"version":3,"sources":["components/ResultDisplay/index.js","components/Numbers/SingleNumber.js","components/Numbers/index.js","components/Operators/SingleOperator.js","components/Operators/index.js","components/Operators/EqualOperator.js","components/Reset/index.js","components/Numbers/Decimal.js","components/Calculator/index.js","App.js","serviceWorker.js","index.js"],"names":["ResultDisplay","value","display","className","SingleNumber","children","onClick","type","Numbers","Component","constructor","props","super","this","onChange","bind","num","onUpdate","render","numbers","i","map","SingleOperator","Operators","op","EqualOperator","Reset","Decimal","Calculator","state","currVal","preVal","currDisplay","base","isNewNumber","isOperatorEntered","isCompleted","isDecimalAdded","displayedEquation","onEnterNumber","onAddDecimalPoint","onEnterOperator","onReset","updateResult","onEqualTo","newBase","setState","newVal","Math","pow","console","log","toString","toPrecision","actualDisplay","parsed","parseInt","charAt","length","isNaN","slice","vals","ops","parts","split","s","includes","push","val","parseFloat","pop","reverse","currResult","resultDisplay","toExponential","equationDisplay","operators","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a1117a2.chunk.js","sourcesContent":["import React from 'react';\nimport './index.css';\n\nconst ResultDisplay = ({value, display}) =>\n\t<div className=\"result-display\">\n\t\t<div className=\"all-enter\">{display}</div>\n\t\t<div className=\"result\">{value}</div>\n\t</div>\n\nexport default ResultDisplay;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SingleNumber = ({className, children, onClick}) =>\n\t<button\n\t\tclassName={className}\n\t\tonClick={onClick}\n\t\ttype=\"button\"\n\t>\n\t\t{children}\n\t</button>\n\nSingleNumber.propTypes = {\n\tclassName: PropTypes.string,\n\tonClick: PropTypes.func.isRequired,\n\tchildren: PropTypes.number.isRequired\n}\n\nexport default SingleNumber;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleNumber from './SingleNumber';\nimport \"./index.css\";\n\nclass Numbers extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.onChange = this.onChange.bind(this);\n\t}\n\n\tonChange(num){\n\t\tthis.props.onUpdate(num);\n\t}\n\n\trender(){\n\t\tconst numbers = [];\n\t\tfor(let i = 1; i < 10; i++){\n\t\t\tnumbers[i] = i;\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t {numbers.map(num =>\n\t\t\t \t<SingleNumber key={num}\n\t\t\t \t\tclassName=\"num\"\n\t\t\t \t\tonClick={() => this.onChange(num)}>\n\t\t\t \t\t{num}\n\t\t\t \t</SingleNumber>\n\t\t\t )}\n\t\t\t \t<SingleNumber key={0}\n\t\t\t \t\tclassName=\"zero\"\n\t\t\t \t\tonClick={() => this.onChange(0)}>\n\t\t\t \t\t{0}\n\t\t\t \t</SingleNumber>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nNumbers.propTypes = {\n\tonUpdate: PropTypes.func.isRequired\n}\n\nexport default Numbers;\n","import React from 'react';\nimport \"./index.css\";\n\nconst SingleOperator = ({onClick, children}) => \n\t<button \n\t\tclassName=\"operators\"\n\t\ttype=\"button\"\n\t\tonClick={onClick}\n\t>\n\t\t{children}\n\t</button>\n\nexport default SingleOperator;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SingleOperator from './SingleOperator';\nimport \"./index.css\";\n\nclass Operators extends Component{\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tthis.onChange = this.onChange.bind(this);\n\t}\n\n\tonChange(op){\n\t\tthis.props.onUpdate(op);\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"op-box\">\n\t\t\t \t<SingleOperator onClick={() => this.onChange(\"+\")}>+</SingleOperator>\n\t\t\t \t<SingleOperator onClick={() => this.onChange(\"-\")}>-</SingleOperator>\n\t\t\t \t<SingleOperator onClick={() => this.onChange(\"*\")}>*</SingleOperator>\n\t\t\t \t<SingleOperator onClick={() => this.onChange(\"/\")}>/</SingleOperator>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nOperators.propTypes = {\n\tonUpdate: PropTypes.func.isRequired\n}\n\n\nexport default Operators;","import React from 'react';\nimport './index.css';\n\nconst EqualOperator = ({onClick}) => \n\t<button \n\t\tclassName=\"equal\"\n\t\ttype=\"button\"\n\t\tonClick={onClick}\n\t>\n\t\t=\n\t</button>\n\nexport default EqualOperator;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './index.css';\n\nconst Reset = ({onClick}) =>\n\t<button \n\t\tclassName=\"reset\" \n\t\tonClick={onClick}\n\t\ttype=\"button\"> AC </button>\n\nReset.propTypes = {\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Reset;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport \"./index.css\";\n\nconst Decimal = ({onClick}) => \n\t<button \n\t\tclassName=\"decimal\"\n\t\tonClick={onClick}\n\t\ttype=\"button\"\n\t>\n\t\t.\n\t</button>\n\n\nDecimal.propTypes = {\n\tonClick: PropTypes.func.isRequired\n}\n\nexport default Decimal;","import React, { Component } from 'react';\nimport ResultDisplay from '../ResultDisplay';\nimport Numbers from '../Numbers';\nimport Operators from '../Operators';\nimport EqualOperator from '../Operators/EqualOperator';\nimport Reset from '../Reset';\nimport Decimal from '../Numbers/Decimal';\nimport './index.css';\n\nclass Calculator extends Component{\n\tconstructor(props){\n\t    super(props);\n\n\t    this.state = {\n\t      currVal: 0,\n\t\t\t\tpreVal: 0,\n\t\t\t\tcurrDisplay: \"0\",\n\t\t\t\tbase: 1,\n\t      isNewNumber: true,\n\t      isOperatorEntered: false,\n\t      isCompleted: false,\n        isDecimalAdded: false,\n\t\t\t\tdisplayedEquation: \"\",\n\t    }\n\n\t    this.onEnterNumber = this.onEnterNumber.bind(this);\n\t    this.onAddDecimalPoint = this.onAddDecimalPoint.bind(this);\n\t    this.onEnterOperator = this.onEnterOperator.bind(this);\n\t    this.onReset = this.onReset.bind(this);\n\t    this.updateResult = this.updateResult.bind(this);\n\t    this.onEqualTo = this.onEqualTo.bind(this);\n  \t}\n\n  \tonEnterNumber(num){\n\t\t\tconst {currVal, base, isDecimalAdded, isCompleted, isNewNumber, displayedEquation} = this.state;\n\t\t\tif(currVal > 9999999999 || base >= 10) return;\n\t\t\t// if this is the beginning of an equation\n\t\t\t// or a new number after an operator\n\t\t\tlet newBase = base;\n\t\t\tif(isCompleted || isNewNumber){\n\t\t\t\tthis.setState((state) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisCompleted: false,\n\t\t\t\t\t\tcurrVal: num,\n\t\t\t\t\t\tcurrDisplay: num,\n\t\t\t\t\t\tisNewNumber: false,\n\t\t\t\t\t\tdisplayedEquation: isCompleted? \"\" + num : displayedEquation + num\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}else{\n\t\t\t\tlet newVal = 0;\n\t\t\t\t// Determine whether the value has a decimal point\n\t\t\t\tif(isDecimalAdded){\n\t\t\t\t\tnewVal = currVal + num / Math.pow(10, newBase);\n\t\t\t\t\tnewBase++;\n\t\t\t\t}else{\n\t\t\t\t\tnewVal = currVal * 10 + num;\n\t\t\t\t}\n\t\t\t\tconsole.log(newVal);\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrVal: newVal,\n\t\t\t\t\tbase: newBase,\n\t\t\t\t\tcurrDisplay: base === 1 ? newVal.toString() : newVal.toPrecision(newBase - 1).toString(),\n\t\t\t\t\tisNewNumber: false,\n\t\t\t\t\tdisplayedEquation: displayedEquation + num\n\t\t\t\t})\n\t\t\t}\n  \t}\n\n  \tonAddDecimalPoint(){\n\t\t\tconst {currDisplay, isNewNumber,displayedEquation} = this.state;\n\t\t\tif(!this.state.isDecimalAdded){\n\t\t\t\tthis.setState({\n\t\t\t\t\tisDecimalAdded: true,\n\t\t\t\t\tcurrDisplay: isNewNumber ? \".\" : currDisplay + \".\",\n\t\t\t\t\tdisplayedEquation: displayedEquation + \".\"\n\t\t\t\t});\n\t\t\t}\n  \t}\n\n  \tonEnterOperator(op) {\n\t\t\tconst {currVal, isCompleted, displayedEquation} = this.state;\n\t\t\tlet actualDisplay = displayedEquation;\n\t\t\tlet parsed = parseInt(displayedEquation.charAt(displayedEquation.length - 1));\n\t\t\tif(isNaN(parsed)){\n\t\t\t\tactualDisplay = displayedEquation.slice(0, displayedEquation.length - 1);\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tcurrVal: 0,\n\t\t\t\tbase: 1,\n\t\t\t\tisCompleted: false,\n\t\t\t\tisNewNumber: true,\n\t\t\t\tisDecimalAdded: false,\n\t\t\t\tisOperatorEntered: true,\n\t\t\t\tdisplayedEquation: isCompleted ? currVal + op : actualDisplay + op\n\t\t\t});\n  \t}\n\n  \tupdateResult(){\n  \t\tconst {displayedEquation} = this.state;\n\t\t\tlet vals = [];\n\t\t\tlet ops = [];\n\t\t\tlet parts = displayedEquation.split(/(\\+|-|\\*|\\/)/);\n\t\t\tif(parts[0] === \"\"){\n\t\t\t\tparts[0] = \"0\";\n\t\t\t}\n\t\t\tconsole.log(parts);\n\t\t\tfor(let s of parts){\n\t\t\t\tif([\"+\", \"-\", \"*\", \"/\"].includes(s)){\n\t\t\t\t\tops.push(s);\n\t\t\t\t}else{\n\t\t\t\t\tlet op = ops[ops.length - 1];\n\t\t\t\t\tif([\"*\", \"/\"].includes(op)){\n\t\t\t\t\t\tlet val = parseFloat(s);\n\t\t\t\t\t\tops.pop();\n\t\t\t\t\t\tlet preVal = vals.pop();\n\t\t\t\t\t\tif(op === \"*\"){\n\t\t\t\t\t\t\tvals.push(preVal * val);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tvals.push(preVal / val);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tvals.push(parseFloat(s));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(\"vals:\" + vals);\n\t\t\tconsole.log(\"ops: \" + ops);\n\t\t\tvals = vals.reverse();\n\t\t\tops = ops.reverse();\n\t\t\twhile(ops.length !== 0){\n\t\t\t\tlet op = ops.pop();\n\t\t\t\tlet preVal = vals.pop();\n\t\t\t\tlet val = vals.pop();\n\t\t\t\tif(op === \"+\"){\n\t\t\t\t\tvals.push(preVal + val);\n\t\t\t\t}else vals.push(preVal - val);\n\t\t\t}\n\t\t\treturn vals.pop();\n  \t}\n\n  \tonEqualTo(){\n\t\t\tconst currResult = this.updateResult();\n\t\t\tif(isNaN(currResult)){\n\t\t\t\tthis.onReset();\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrDisplay: \"Error\"\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst resultDisplay = currResult.toString().length <= 12 ? currResult : currResult.toExponential(8);\n\t\t\tconst {displayedEquation} = this.state;\n\t\t\tlet equationDisplay = displayedEquation + \"=\" + resultDisplay;\n\t\t\tthis.setState({\n\t\t\t\tcurrVal: currResult,\n\t\t\t\tbase: 1,\n\t\t\t\tcurrDisplay: resultDisplay,\n\t\t\t\tisCompleted: true,\n\t\t\t\tisNewNumber: true,\n\t\t\t\tisDecimalAdded: false,\n\t\t\t\tisOperatorEntered: false,\n\t\t\t\toperators: [],\n\t\t\t\tdisplayedEquation: equationDisplay\n\t\t\t});\n  \t}\n\n  \tonReset(){\n  \t\tthis.setState({\n  \t\t\tisNewNumber: true,\n  \t\t\tisOperatorEntered: false,\n        isDecimalAdded: false,\n  \t\t\tcurrVal: 0,\n\t\t\t\tbase: 1,\n\t\t\t\tcurrDisplay: \"0\",\n  \t\t\toperators: [],\n        isCompleted: false,\n\t\t\t\tdisplayedEquation: \"\"\n  \t\t});\n  \t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"calculator\">\n\t\t\t\t<ResultDisplay value={this.state.currDisplay} display={this.state.displayedEquation}/>\n\t\t\t\t<div className=\"box\">\n\t\t\t\t\t<Reset onClick={this.onReset}/>\n\t\t\t\t\t<EqualOperator onClick={this.onEqualTo}/>\n\t\t\t\t</div>\n\t\t\t\t<Numbers onUpdate={this.onEnterNumber}/>\n        <Decimal onClick={this.onAddDecimalPoint}/>\n\t\t\t\t<Operators onUpdate={this.onEnterOperator}/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Calculator;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <Calculator />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}